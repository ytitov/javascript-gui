import {Component, OnInit, Input, Output, EventEmitter} from 'angular2/core';

import {Client} from "../../logic/objects/client"
import {Note} from "../../logic/objects/Note"
import {UserGuiDTO} from '../../logic/objects/gui-dto/UserDTO';

import {StorageService} from '../../services/Storage.service';
import {UserService} from '../../services/User.service';

import {PersonComponent} from "./Person.component";

@Component({
  selector: 'client-component',
  templateUrl: './views/ManageDialog/Client.html',
  styleUrls: ['./views/Dialog/Dialog.css'],
  directives: [PersonComponent], //
  providers: [] // register the service with the injector
})

export class ClientComponent implements OnInit {

	@Output() newclientOutput = new EventEmitter();
	@Output() selectClientOutput = new EventEmitter();

	clientList: Client[];
	selectedClient: Client;

	canEditFields: boolean;
	showEditButton: boolean;
	showSubmitButton: boolean;
	showAddButton: boolean;
	showDeleteButton: boolean;
	showCancelButton: boolean; // cancel everything type button

	delButtonLabel: string;
	searchClientInput: string;

	// fields
	userId: string;
	phone: string;
	firstName: string;
	lastName: string;
	address1: string;
	address2: string;
	city: string;
	state: string;
	zip: string;
	email: string;
	noteList: Note[];
	noteString: string;

	// states
	curState: number;
	stateDefault = 0;
	stateAddingClient = 1;
	stateModifyingClient = 2;
	stateDeletingClient = 3;


	constructor(
		private userService: UserService,
		private storageService: StorageService) {

		this.setDefaultState();

		this.delButtonLabel = "Delete"
		this.searchClientInput = "";
	}

	ngOnInit() {

	}
	
	setDefaultState() {
		this.curState = this.stateDefault;
		this.canEditFields = false;
		this.clearFields();
		this.showEditButton = false;
		this.showSubmitButton = false;
		this.showAddButton = true;
		this.showDeleteButton = false;
		this.showCancelButton = false;
	}

	clearFields() {
		this.userId = "";
		this.phone = "";
		this.firstName = "";
		this.lastName = "";
		this.address1 = "";
		this.address2 = "";
		this.city = "";
		this.state = "";
		this.zip = "";
		this.email = "";
		this.noteList = [];
		this.noteString = "";
	}

	clientClicked(emp: Client) {
		this.clientSelectedState();
		this.selectedClient = emp;

		this.userId = emp.getId();
		this.phone = emp.getPhone();
		this.firstName = emp.getFirstName();
		this.lastName = emp.getLastName();
		this.address1 = emp.getAddress1();
		this.address2 = emp.getAddress2();
		this.city = emp.getCity();
		this.state = emp.getState();
		this.zip = emp.getZip();
		this.email = emp.getEmail();
		this.noteList = emp.getNotes();
		this.canEditFields = false;

		this.selectClientOutput.emit(emp);
		// in case was in middle of delete and switched employees
	}

	addClientButtonClicked() {
		console.log("addClientButtonClicked");

		this.clearFields();
		this.showAddButton = false;
		this.showSubmitButton = true;
		this.canEditFields = true;
		this.showCancelButton = true;
		this.curState = this.stateAddingClient;
	}
	
	// this is the new implementation coming from the 
	// person component, so delete addNoteButtonClicked later
	handleAddNoteClicked(noteText: string) {
		this.noteString = noteText;
		console.log ("attempting to add note: ");
		console.log (noteText);
		this.submitClicked();
	}
	
	handleDelNoteClicked(note: Note) {
		var newNoteList = []
		for (var item of this.noteList) {
			if (note.dateCreated != item.dateCreated) {
				newNoteList.push(item);
			}
		}
		
		this.noteList = newNoteList;
		this.noteString = "";
		this.submitClicked();
		this.loadAllClients();
	}

	/**
	 * for submiting changes
	 */
	submitClicked() {
		if (this.curState == this.stateAddingClient) {
			var client = this.getClientFromFields();
			this.storageService.addRecord(client);
			this.setDefaultState();
		} else if (this.curState == this.stateModifyingClient) {
			var actualId = this.userId;
			var emp = this.getClientFromFields();
			// see if the user is putting in a note
			if (this.noteString.length > 0) {
				var note = new Note();
				note.content = this.noteString;
				note.employeeId = this.userService.currentUser.getId();
				emp.person.noteList.push(note);
			}
			emp.person.id = actualId; // because we must replace the autogenerated id
			console.log (emp);
			this.storageService.updateRecord(emp);
			this.setDefaultState();
		} else {
			console.log ("Error: submit hit with state: "+this.curState);
		}
	}

	editButtonClicked() {
		this.showAddButton = false;
		this.showEditButton = false;
		this.canEditFields = true;
		this.showSubmitButton = true;
		this.showDeleteButton = false;
		this.curState = this.stateModifyingClient;
	}

	deleteButtonClicked() {
		if (this.curState == this.stateDeletingClient) {
			// hitting delete for the second time
			this.storageService.deleteRecord(this.selectedClient);
			this.delButtonLabel = "Delete";
			this.setDefaultState();
		} else {
			this.showCancelButton = true;
			this.curState = this.stateDeletingClient;
			this.delButtonLabel = "Confirm Delete";
		}
	}

	cancelDeleteButtonClicked() {
		this.setDefaultState();
	}

	cancelButtonClicked() {
		this.setDefaultState();
	}

	clientSelectedState() {
		// reset delete process
		this.showDeleteButton = true;
		this.delButtonLabel = "Delete";
		//
		this.showSubmitButton = false;
		this.showAddButton = true;
		this.showEditButton = true;
		this.canEditFields = false;
	}

	/**
	 * callback function for when client list gets updated.
	 * not necessary to do anything here at this point as the 
	 * screen is updated automatically.  The function requires a callback
	 * so its here.
	 */
	clientListUpdated() {

	}

	private getClientFromFields(): Client {
		var emp = new Client();
		emp.person.phone = this.phone;
		emp.person.first = this.firstName;
		emp.person.last = this.lastName;
		emp.person.address1 = this.address1;
		emp.person.address2 = this.address2;
		emp.person.city = this.city;
		emp.person.state = this.state;
		emp.person.zip = this.zip;
		emp.person.email = this.email;
		emp.person.noteList = this.noteList;
		return emp;
	}

	loadAllClients() {
		var _this = this;
		console.log("load all clients clicked");
		this.storageService.localStorage.clientLoader.getAll().then(
			list => {
				_this.clientList = list;
				console.log(list);
			},
			error => {
				console.log("Error loading all clients");
			}
		);

	}

	searchClientInputChanged() {

		var words = this.searchClientInput.split(" ");
		console.log("searching for words: ");
		console.log(words);

		var filteredWords = [];

		for (var item of words) {
			if (item.length > 1) {
				filteredWords.push(item);
			}
		}

		if (filteredWords.length == 0) {
			// this.loadAllServices();
			return;
		}

		console.log("search box: " + this.searchClientInput);
		var _this = this;
		console.log("load all clients clicked");
		// this.storageService.localStorage.clientLoader.searchName(this.searchClientInput).then (
		this.storageService.localStorage.clientLoader.searchTerms(filteredWords).then(
			list => {
				_this.clientList = list;
			},
			error => {
				console.log("Error loading all clients");
			}
		);
	}
}